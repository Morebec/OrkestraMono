<?php

namespace Morebec\Orkestra\SymfonyBundle\Command;

use Morebec\Orkestra\EventSourcing\EventProcessor\EventProcessorInterface;
use Morebec\Orkestra\EventSourcing\EventProcessor\TrackingEventProcessor;
use Morebec\Orkestra\EventSourcing\Projection\ProjectorEventPublisher;
use Morebec\Orkestra\EventSourcing\Projection\ProjectorGroup;
use Morebec\Orkestra\SymfonyBundle\DependencyInjection\ProjectorGroupRegistry;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

abstract class AbstractProjectionGroupEventProcessorConsoleCommand extends AbstractEventProcessorConsoleCommand
{
    protected ProjectorGroupRegistry $projectorGroupRegistry;

    public function __construct(
        ProjectorGroupRegistry $projectorGroupRegistry,
        string $commandName = null,
        string $progressBarStyle = 'modern'
    ) {
        parent::__construct($commandName, $progressBarStyle);
        $this->projectorGroupRegistry = $projectorGroupRegistry;
    }

    protected function configure(): void
    {
        $this->addArgument(
            'projector-group-name',
            InputArgument::REQUIRED,
            'Name of the projection group to control.',
        );

        parent::configure();
    }

    protected function executeCommand(EventProcessorInterface $processor, string $command): int
    {
        $this->io->title("Projector Group: {$processor->getName()}");

        return parent::executeCommand($processor, $command); // TODO: Change the autogenerated stub
    }

    protected function resetProcessor(EventProcessorInterface $processor): void
    {
        parent::resetProcessor($processor);

        /* @var TrackingEventProcessor $processor */

        /** @var ProjectorEventPublisher $publisher */
        $publisher = $processor->getPublisher();

        $publisher->getProjector()->reset();
    }

    protected function getProjectorGroup(InputInterface $input, OutputInterface $output): ProjectorGroup
    {
        $projectorGroupName = (string) $input->getArgument('projector-group-name');

        return $this->projectorGroupRegistry->getProjectorGroup($projectorGroupName);
    }
}
